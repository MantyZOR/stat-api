name: Docker prod
on:
  workflow_run:
    workflows: [Update submodule and create PR]
    types: [completed]
    branches: [master]
  workflow_dispatch:
  
permissions:
    packages: write
    contents: read

env:
  IMAGE_NAME: "statapi"

jobs:
  prepare:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Prepare dist for image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'web/package-lock.json'
      
      - name: Replace path
        working-directory: ./web
        run: |
          sed -i "s|base: '/web/'|base: '/'|" vite.config.ts
          sed -i "s|outDir: 'dist'|outDir: '../dist'|" vite.config.ts

      - name: Prepare front
        working-directory: ./web
        run: |
          npm ci
          npm run forcebuild
      
      - name: Prepare dist
        run: |
          for file in dist/img/icons/ui/Arrow-*.svg; do 
            if [ -e "$file" ]; then
              new_name=$(echo "$file" | sed 's/Arrow-/arrow-/i')
              mv -v "$file" "$new_name"
            fi
          done
      - name: Create artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ./dist
          retention-days: 1

  push:
    needs: prepare
    name: Build and push a Docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: ./dist
      
      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo IMAGE_ID=$IMAGE_ID
          
          docker tag $IMAGE_NAME $IMAGE_ID:latest
          docker push $IMAGE_ID:latest
  
  release:
    name: Push changes to hosting
    needs: [push, prepare]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Push to hosting
        run: |
          CURRENT_DATE=$(date +'%Y-%m-%d-%H')
          git clone ${{ secrets.AMVERA_REMOTE }} .

          echo $CURRENT_DATE > update_time.txt
          git add update_time.txt

          git commit -m "Updated at $CURRENT_DATE"

          # Теперь пушим в amvera
          git push origin master
